<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>dubbo</artifactId>
        <groupId>com.liqan</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>
    <packaging>war</packaging>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <artifactId>dubbo-provider</artifactId>

    <dependencies>
        <dependency>
            <groupId>com.liqan</groupId>
            <artifactId>dubbo-api</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>


    </dependencies>
    <!--下面的配置用于打jar包部署
        打成war包的话需要添加webapp/WEB-INF文件夹并在其下添加
        打成jar包的话需要将jar包和lib目录放在同一文件夹下启动
        java -jar xxx.jar &
    -->
    <!--<build>-->
        <!--<finalName>dubbo-provider</finalName>-->
        <!--<resources>-->
            <!--<resource>-->
                <!--<targetPath>${project.build.directory}/classes</targetPath>-->
                <!--<directory>src/main/resources</directory>-->
                <!--<filtering>true</filtering>-->
                <!--<includes>-->
                    <!--<include>**/*.xml</include>-->
                    <!--<include>*.properties</include>-->
                <!--</includes>-->
            <!--</resource>-->
            <!--&lt;!&ndash; mapper.xml打进相应的文件夹 &ndash;&gt;-->
            <!--<resource>-->
            <!--<targetPath>${project.build.directory}/classes/com/liqian/dao</targetPath>-->
            <!--<directory>src/main/resources/mapper</directory>-->
            <!--<filtering>true</filtering>-->
            <!--<includes>-->
            <!--<include>**/*.xml</include>-->
            <!--</includes>-->
            <!--</resource>-->

            <!--&lt;!&ndash; 结合com.alibaba.dubbo.container.Main &ndash;&gt;-->
            <!--<resource>-->
                <!--<targetPath>${project.build.directory}/classes/META-INF/spring</targetPath>-->
                <!--<directory>src/main/resources/spring</directory>-->
                <!--<filtering>true</filtering>-->
                <!--<includes>-->
                    <!--<include>**/*.xml</include>-->
                <!--</includes>-->
            <!--</resource>-->
        <!--</resources>-->

        <!--<pluginManagement>-->
            <!--<plugins>-->
                <!--&lt;!&ndash; 解决Maven插件在Eclipse内执行了一系列的生命周期引起冲突 &ndash;&gt;-->
                <!--<plugin>-->
                    <!--<groupId>org.eclipse.m2e</groupId>-->
                    <!--<artifactId>lifecycle-mapping</artifactId>-->
                    <!--<version>1.0.0</version>-->
                    <!--<configuration>-->
                        <!--<lifecycleMappingMetadata>-->
                            <!--<pluginExecutions>-->
                                <!--<pluginExecution>-->
                                    <!--<pluginExecutionFilter>-->
                                        <!--<groupId>org.apache.maven.plugins</groupId>-->
                                        <!--<artifactId>maven-dependency-plugin</artifactId>-->
                                        <!--<versionRange>[2.0,)</versionRange>-->
                                        <!--<goals>-->
                                            <!--<goal>copy-dependencies</goal>-->
                                        <!--</goals>-->
                                    <!--</pluginExecutionFilter>-->
                                    <!--<action>-->
                                        <!--<ignore />-->
                                    <!--</action>-->
                                <!--</pluginExecution>-->
                            <!--</pluginExecutions>-->
                        <!--</lifecycleMappingMetadata>-->
                    <!--</configuration>-->
                <!--</plugin>-->
            <!--</plugins>-->
        <!--</pluginManagement>-->
        <!--<plugins>-->
            <!--&lt;!&ndash; 打包jar文件时，配置manifest文件，加入lib包的jar依赖 &ndash;&gt;-->
            <!--<plugin>-->
                <!--<groupId>org.apache.maven.plugins</groupId>-->
                <!--<artifactId>maven-jar-plugin</artifactId>-->
                <!--<version>2.6</version>-->
                <!--<configuration>-->
                    <!--<classesDirectory>target/classes/</classesDirectory>-->
                    <!--<archive>-->
                        <!--<manifest>-->
                            <!--<mainClass>com.alibaba.dubbo.container.Main</mainClass>-->
                            <!--&lt;!&ndash; 打包时 MANIFEST.MF文件不记录的时间戳版本 &ndash;&gt;-->
                            <!--<useUniqueVersions>false</useUniqueVersions>-->
                            <!--<addClasspath>true</addClasspath>-->
                            <!--<classpathPrefix>lib/</classpathPrefix>-->
                        <!--</manifest>-->
                        <!--<manifestEntries>-->
                            <!--<Class-Path>.</Class-Path>-->
                        <!--</manifestEntries>-->
                    <!--</archive>-->
                <!--</configuration>-->
            <!--</plugin>-->
            <!--<plugin>-->
                <!--<groupId>org.apache.maven.plugins</groupId>-->
                <!--<artifactId>maven-dependency-plugin</artifactId>-->
                <!--<executions>-->
                    <!--<execution>-->
                        <!--<id>copy-dependencies</id>-->
                        <!--<phase>package</phase>-->
                        <!--<goals>-->
                            <!--<goal>copy-dependencies</goal>-->
                        <!--</goals>-->
                        <!--<configuration>-->
                            <!--<type>jar</type>-->
                            <!--<includeTypes>jar</includeTypes>-->
                            <!--&lt;!&ndash;<useUniqueVersions>false</useUniqueVersions>&ndash;&gt;-->
                            <!--<outputDirectory>-->
                                <!--${project.build.directory}/lib-->
                            <!--</outputDirectory>-->
                        <!--</configuration>-->
                    <!--</execution>-->
                <!--</executions>-->
            <!--</plugin>-->
        <!--</plugins>-->
    <!--</build>-->


</project>